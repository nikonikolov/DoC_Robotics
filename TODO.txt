TO DO:
    - calibrate PID for the moving motors - make sure we can go in straight lines and rotate properly
    - fix the bumping


    - write smarter navigate to waypoint - don't rotate if you are very close to the waypoint
    - account for going to all points and not hitting anything
    - code for shifting measurements - might need to take measurmeents in a different fashion


    - MCL
    - deciding on points to train for - must have backup ones
    - test if taking the 10 sonar readings in a row causes problems as waves have not died out

    - make sure you go to both clusters    

IMPROVEMENTS:
    - algorithm reasoning for signatures with junk readings


MCL MODIFICATIONS:
    - make the partcile distribution proportional to the distance moved by
    - PARAMETERS THAT MIGHT NEED TUNING
        SONAR_CONSTANT_LIKELIHOOD   mcl.py 
        SONAR_STD                   mcl.py
        ODOMETRY STD                pmotion.py

WAYPOINTS:
A
    (84, 30, 0.0, 60, -45)
    (160, 30, 0.0, 85, -45)
B
    (126, 147, math.pi/2, 0, 360)
C
    (42, 109, math.pi, 0, 360)




K_i 0.27
Old c++ interface
variance 1.4 for roatation
SONAR CONST LIK = 0.008 or 0.01
SNOAR STD = 1.8??


Calibrartion of distance and rotation 
    - make sure to run after you have made proper PID and velocity calibration - you want the robot to be as fast as possible 
    - use some tape for the robot to draw on while the wheels are rotation on the actual floor


