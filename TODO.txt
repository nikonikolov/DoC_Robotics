TO DO:
    - calibrate PID for the moving motors - make sure we can go in straight lines and rotate properly


    - write code for finding free area to make sure you can run MCL in that area - essentially OCCUPANCY MAPPING

    - MCL
    - deciding on points to train for - must have backup ones
    - test if taking the 10 sonar readings in a row causes problems as waves have not died out
    - fix thresholding - use the binary approach to decide where to look and then use a weighted average based on the error

IMPROVEMENTS:
    - algorithm reasoning for signatures with junk readings


MCL MODIFICATIONS:
    - make the partcile distribution proportional to the distance moved by
    - PARAMETERS THAT MIGHT NEED TUNING
        SONAR_CONSTANT_LIKELIHOOD   mcl.py 
        SONAR_STD                   mcl.py
        ODOMETRY STD                pmotion.py







K_i 0.27
Old c++ interface
variance 1.4 for roatation
SONAR CONST LIK = 0.008 or 0.01
SNOAR STD = 1.8??


Calibrartion of distance and rotation 
    - make sure to run after you have made proper PID and velocity calibration - you want the robot to be as fast as possible 
    - use some tape for the robot to draw on while the wheels are rotation on the actual floor


