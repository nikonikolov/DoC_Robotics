Help on module brickpi:

NNAAMMEE
    brickpi

FFIILLEE
    /usr/local/lib/python2.7/dist-packages/brickpi.so

CCLLAASSSSEESS
    Boost.Python.enum(__builtin__.int)
        SensorType
    Boost.Python.instance(__builtin__.object)
        Interface
        vector_double
        vector_timestamp
        vector_uchar
    
    class IInntteerrffaaccee(Boost.Python.instance)
     |  BrickPi Interface class.
     |  We mirror the functionalities provided by the manufacturer in C++ style 
     |  and additionally provide (somewhat) low-level speed and position control
     |  for the motors.
     |  
     |  Method resolution order:
     |      Interface
     |      Boost.Python.instance
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(...)
     |  
     |  ____rreedduuccee____ = <unnamed Boost.Python function>(...)
     |  
     |  eemmeerrggeennccyySSttoopp(...)
     |      Immediately stop all motors, stop the polling and control thread (bad
     |      for the hardware).
     |      
     |      :returns: true on success
     |  
     |  ggeettMMoottoorrAAnnggllee(...)
     |      Get the current motor angle.
     |      
     |      :param motorPort: list of motor ports [0..3]
     |      :returns: tuple of angle [rad] and timestamp [nsec], empty on failure
     |  
     |  ggeettMMoottoorrAAnngglleeRReeffeerreenncceess(...)
     |      Get the currently set motor angle references. Note: you must set 
     |      reference rotation speed(s) before.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :returns: list of reference angles [rad], empty on failure
     |  
     |  ggeettMMoottoorrAAnngglleess(...)
     |      Get the current motor angles.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :returns: list of tuples of angle [rad] and timestamp [nsec], empty on failure
     |  
     |  ggeettSSeennssoorrVVaalluuee(...)
     |      Read a sensor value (thread-safe). 
     |      
     |      :param sensorPort: sensor port [0..4]
     |      :returns: tuple of sensor value and timstamp [nsec] or empty on failure
     |  
     |  iinnccrreeaasseeMMoottoorrAAnngglleeRReeffeerreennccee(...)
     |      Put motors to position control mode and increase the reference angle
     |      that should be reached.
     |      
     |      :param motorPort: motor port [0..3]
     |      :param angleReferenceIncrease: angle reference increase [rad]
     |      :returns: true on success
     |      
     |      Put motors to position control mode and increase the reference angle
     |      that should be reached, while not exceeding a maximum rotation speed.
     |      
     |      :param motorPort: motor port [0..3]
     |      :param angleReferenceIncrease: angle reference increase [rad]
     |      :param rotationSpeedReference: (maximum) rotation speed [rad/s]
     |      :returns: true on success
     |  
     |  iinnccrreeaasseeMMoottoorrAAnngglleeRReeffeerreenncceess(...)
     |      Put motors to position control mode and increase the reference angle
     |      that should be reached.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :param angleReferenceIncreases: list of angle reference increases [rad]
     |      :returns: true on success
     |      
     |      Put motors to position control mode and increase the reference angle
     |      that should be reached, while not exceeding a maximum rotation speed.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :param angleReferenceIncreases: list of angle reference increases [rad]
     |      :param rotationSpeedReference: list of (maximum) rotation speed [rad/s]
     |      :returns: true on success
     |  
     |  iinniittiiaalliizzee(...)
     |      This starts a separate thread that continuously polls the activated 
     |      sensors as well as controls the motors that were started.
     |      
     |      :returns: true on success
     |  
     |  mmoottoorrAAnngglleeRReeffeerreenncceeRReeaacchheedd(...)
     |      Determine, if a motor has reached its reference angle. Note: 
     |      you must set a reference angle before.
     |      
     |      :param motorPort: motor port [0..3]
     |      :returns: true, if reached
     |  
     |  mmoottoorrAAnngglleeRReeffeerreenncceessRReeaacchheedd(...)
     |      Determine, if motors have reached their reference angles. Note: 
     |      you must set reference angles before.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :returns: true, if all angles have reached their references
     |  
     |  mmoottoorrDDiissaabbllee(...)
     |      Disable individual motor.
     |      
     |      :param motorPort: motor port [0..3]
     |      :returns: true on success
     |  
     |  mmoottoorrEEnnaabbllee(...)
     |      Enable individual motor.
     |      
     |      :param motorPort: motor port [0..3]
     |      :returns: true on success
     |  
     |  mmoottoorrRRoottaattiioonnSSppeeeeddRReeffeerreenncceeRReeaacchheedd(...)
     |      Checks, if the previously set rotation speed reference was reached.
     |      Note: you must set reference rotation speed(s) before.
     |      
     |      :returns: true on success
     |  
     |  sseennssoorrDDiissaabbllee(...)
     |      Disable individual sensor with.
     |      
     |      :param sensorPort: sensor port [0..4]
     |      :returns: true on success
     |  
     |  sseennssoorrEEnnaabbllee(...)
     |      Enable individual sensor.
     |      
     |      :param sensorPort: sensor port [0..4]
     |      :returns: true on success
     |  
     |  sseettMMoottoorrAAnngglleeCCoonnttrroolllleerrPPaarraammeetteerrss(...)
     |      Set the angle controller parameters for a motor.
     |      
     |      :returns: true on success
     |  
     |  sseettMMoottoorrAAnngglleeRReeffeerreennccee(...)
     |      Put a motor to position control mode and set a reference angle that
     |      should be reached.
     |      
     |      :param motorPort: motor port [0..3]
     |      :param angleReference: angle reference [rad]
     |      :returns: true on success
     |      
     |      Put a motor to position control mode and set a reference angle that
     |      should be reached, while not exceeding a maximum rotation speed.
     |      
     |      :param motorPort: motorPort [0..3]
     |      :param angleReference: angle reference [rad]
     |      :param rotationSpeedReference: (maximum) rotation speed [rad/s]
     |      :returns: true on success
     |  
     |  sseettMMoottoorrAAnngglleeRReeffeerreenncceess(...)
     |      Put motors to position control mode and set a reference angle that
     |      should be reached.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :param angleReference: corresp. list of angle references [rad]
     |      :returns: true on success
     |      
     |      Put motors to position control mode and set a reference angle that
     |      should be reached.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :param angleReference: corresp. list of angle references [rad]
     |      :param rotationSpeedReferences: list of (maximum) rotation speeds [rad/s]
     |      :returns: true on success
     |  
     |  sseettMMoottoorrPPwwmm(...)
     |      Puts the motor motorPort into manual control mode and directly applies the PWM value.
     |      
     |      :param pwm: PWM value [-255,255]
     |      :returns true, if successful.
     |  
     |  sseettMMoottoorrRRoottaattiioonnSSppeeeeddRReeffeerreennccee(...)
     |      Put a motor to speed control mode and set its rotation speed
     |      reference. You may want to check with 
     |      bool motorRotationSpeedReferenceReached(motorPort), when the reference is 
     |      reached.
     |      
     |      :param motorPort: motor port [0..3]
     |      :param rotationSpeedReference: rotation speed references [rad/s]
     |      :returns: true on success
     |  
     |  sseettMMoottoorrRRoottaattiioonnSSppeeeeddRReeffeerreenncceess(...)
     |      Put several motors to speed control mode and set their rotation speed
     |      references. You may want to check with 
     |      bool motorRotationSpeedReferenceReached(motorPort), when the reference is 
     |      reached.
     |      
     |      :param motorPorts: list of motor ports [0..3]
     |      :param rotationSpeedReferences: list of rotation speed references [rad/s]
     |      :returns: true on success
     |  
     |  ssttaarrttLLooggggiinngg(...)
     |      Start logging of timestamp, filtered angle references and actual angles.
     |      
     |      :param filename: full path to your logfile
     |      :returns true on succes
     |  
     |  ssttooppLLooggggiinngg(...)
     |      Stop logging of timestamp, filtered angle references and actual angles.
     |      
     |      :returns true on succes
     |  
     |  tteerrmmiinnaattee(...)
     |      Softly stop all motors and sensors, stop the polling and control thread.
     |      
     |      :returns: true on success
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  MMoottoorrAAnngglleeCCoonnttrroolllleerrPPaarraammeetteerrss = <class 'brickpi.MotorAngleControllerP...
     |      This is a simple struct to store all motor parameters relevant
     |      for controlling it.
     |  
     |  PPiiddPPaarraammeetteerrss = <class 'brickpi.PidParameters'>
     |      This is a simple struct to store all PID parameters
     |  
     |  ____iinnssttaannccee__ssiizzee____ = 1400
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  ____ddiicctt____
     |  
     |  ____wweeaakkrreeff____
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  ____nneeww____ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class SSeennssoorrTTyyppee(Boost.Python.enum)
     |  Method resolution order:
     |      SensorType
     |      Boost.Python.enum
     |      __builtin__.int
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  SSEENNSSOORR__NNOONNEE = brickpi.SensorType.SENSOR_NONE
     |  
     |  SSEENNSSOORR__TTOOUUCCHH = brickpi.SensorType.SENSOR_TOUCH
     |  
     |  SSEENNSSOORR__UULLTTRRAASSOONNIICC = brickpi.SensorType.SENSOR_ULTRASONIC
     |  
     |  nnaammeess = {'SENSOR_NONE': brickpi.SensorType.SENSOR_NONE, 'SENSOR_TOUCH'...
     |  
     |  vvaalluueess = {0: brickpi.SensorType.SENSOR_ULTRASONIC, 1: brickpi.SensorTy...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boost.Python.enum:
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.enum:
     |  
     |  nnaammee
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.int:
     |  
     |  ____aabbss____(...)
     |      x.__abs__() <==> abs(x)
     |  
     |  ____aadddd____(...)
     |      x.__add__(y) <==> x+y
     |  
     |  ____aanndd____(...)
     |      x.__and__(y) <==> x&y
     |  
     |  ____ccmmpp____(...)
     |      x.__cmp__(y) <==> cmp(x,y)
     |  
     |  ____ccooeerrccee____(...)
     |      x.__coerce__(y) <==> coerce(x, y)
     |  
     |  ____ddiivv____(...)
     |      x.__div__(y) <==> x/y
     |  
     |  ____ddiivvmmoodd____(...)
     |      x.__divmod__(y) <==> divmod(x, y)
     |  
     |  ____ffllooaatt____(...)
     |      x.__float__() <==> float(x)
     |  
     |  ____fflloooorrddiivv____(...)
     |      x.__floordiv__(y) <==> x//y
     |  
     |  ____ffoorrmmaatt____(...)
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettnneewwaarrggss____(...)
     |  
     |  ____hhaasshh____(...)
     |      x.__hash__() <==> hash(x)
     |  
     |  ____hheexx____(...)
     |      x.__hex__() <==> hex(x)
     |  
     |  ____iinnddeexx____(...)
     |      x[y:z] <==> x[y.__index__():z.__index__()]
     |  
     |  ____iinntt____(...)
     |      x.__int__() <==> int(x)
     |  
     |  ____iinnvveerrtt____(...)
     |      x.__invert__() <==> ~x
     |  
     |  ____lloonngg____(...)
     |      x.__long__() <==> long(x)
     |  
     |  ____llsshhiifftt____(...)
     |      x.__lshift__(y) <==> x<<y
     |  
     |  ____mmoodd____(...)
     |      x.__mod__(y) <==> x%y
     |  
     |  ____mmuull____(...)
     |      x.__mul__(y) <==> x*y
     |  
     |  ____nneegg____(...)
     |      x.__neg__() <==> -x
     |  
     |  ____nnoonnzzeerroo____(...)
     |      x.__nonzero__() <==> x != 0
     |  
     |  ____oocctt____(...)
     |      x.__oct__() <==> oct(x)
     |  
     |  ____oorr____(...)
     |      x.__or__(y) <==> x|y
     |  
     |  ____ppooss____(...)
     |      x.__pos__() <==> +x
     |  
     |  ____ppooww____(...)
     |      x.__pow__(y[, z]) <==> pow(x, y[, z])
     |  
     |  ____rraadddd____(...)
     |      x.__radd__(y) <==> y+x
     |  
     |  ____rraanndd____(...)
     |      x.__rand__(y) <==> y&x
     |  
     |  ____rrddiivv____(...)
     |      x.__rdiv__(y) <==> y/x
     |  
     |  ____rrddiivvmmoodd____(...)
     |      x.__rdivmod__(y) <==> divmod(y, x)
     |  
     |  ____rrfflloooorrddiivv____(...)
     |      x.__rfloordiv__(y) <==> y//x
     |  
     |  ____rrllsshhiifftt____(...)
     |      x.__rlshift__(y) <==> y<<x
     |  
     |  ____rrmmoodd____(...)
     |      x.__rmod__(y) <==> y%x
     |  
     |  ____rrmmuull____(...)
     |      x.__rmul__(y) <==> y*x
     |  
     |  ____rroorr____(...)
     |      x.__ror__(y) <==> y|x
     |  
     |  ____rrppooww____(...)
     |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
     |  
     |  ____rrrrsshhiifftt____(...)
     |      x.__rrshift__(y) <==> y>>x
     |  
     |  ____rrsshhiifftt____(...)
     |      x.__rshift__(y) <==> x>>y
     |  
     |  ____rrssuubb____(...)
     |      x.__rsub__(y) <==> y-x
     |  
     |  ____rrttrruueeddiivv____(...)
     |      x.__rtruediv__(y) <==> y/x
     |  
     |  ____rrxxoorr____(...)
     |      x.__rxor__(y) <==> y^x
     |  
     |  ____ssuubb____(...)
     |      x.__sub__(y) <==> x-y
     |  
     |  ____ttrruueeddiivv____(...)
     |      x.__truediv__(y) <==> x/y
     |  
     |  ____ttrruunncc____(...)
     |      Truncating an Integral returns itself.
     |  
     |  ____xxoorr____(...)
     |      x.__xor__(y) <==> x^y
     |  
     |  bbiitt__lleennggtthh(...)
     |      int.bit_length() -> int
     |      
     |      Number of bits necessary to represent self in binary.
     |      >>> bin(37)
     |      '0b100101'
     |      >>> (37).bit_length()
     |      6
     |  
     |  ccoonnjjuuggaattee(...)
     |      Returns self, the complex conjugate of any int.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from __builtin__.int:
     |  
     |  ddeennoommiinnaattoorr
     |      the denominator of a rational number in lowest terms
     |  
     |  iimmaagg
     |      the imaginary part of a complex number
     |  
     |  nnuummeerraattoorr
     |      the numerator of a rational number in lowest terms
     |  
     |  rreeaall
     |      the real part of a complex number
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.int:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class vveeccttoorr__ddoouubbllee(Boost.Python.instance)
     |  Method resolution order:
     |      vector_double
     |      Boost.Python.instance
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ccoonnttaaiinnss____(...)
     |  
     |  ____ddeelliitteemm____(...)
     |  
     |  ____ggeettiitteemm____(...)
     |  
     |  ____iinniitt____(...)
     |  
     |  ____iitteerr____(...)
     |  
     |  ____lleenn____(...)
     |  
     |  ____rreedduuccee____ = <unnamed Boost.Python function>(...)
     |  
     |  ____sseettiitteemm____(...)
     |  
     |  aappppeenndd(...)
     |  
     |  eexxtteenndd(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____iinnssttaannccee__ssiizzee____ = 20
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  ____ddiicctt____
     |  
     |  ____wweeaakkrreeff____
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  ____nneeww____ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class vveeccttoorr__ttiimmeessttaammpp(Boost.Python.instance)
     |  Method resolution order:
     |      vector_timestamp
     |      Boost.Python.instance
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ccoonnttaaiinnss____(...)
     |  
     |  ____ddeelliitteemm____(...)
     |  
     |  ____ggeettiitteemm____(...)
     |  
     |  ____iinniitt____(...)
     |  
     |  ____iitteerr____(...)
     |  
     |  ____lleenn____(...)
     |  
     |  ____rreedduuccee____ = <unnamed Boost.Python function>(...)
     |  
     |  ____sseettiitteemm____(...)
     |  
     |  aappppeenndd(...)
     |  
     |  eexxtteenndd(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____iinnssttaannccee__ssiizzee____ = 20
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  ____ddiicctt____
     |  
     |  ____wweeaakkrreeff____
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  ____nneeww____ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class vveeccttoorr__uucchhaarr(Boost.Python.instance)
     |  Method resolution order:
     |      vector_uchar
     |      Boost.Python.instance
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ccoonnttaaiinnss____(...)
     |  
     |  ____ddeelliitteemm____(...)
     |  
     |  ____ggeettiitteemm____(...)
     |  
     |  ____iinniitt____(...)
     |  
     |  ____iitteerr____(...)
     |  
     |  ____lleenn____(...)
     |  
     |  ____rreedduuccee____ = <unnamed Boost.Python function>(...)
     |  
     |  ____sseettiitteemm____(...)
     |  
     |  aappppeenndd(...)
     |  
     |  eexxtteenndd(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____iinnssttaannccee__ssiizzee____ = 20
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boost.Python.instance:
     |  
     |  ____ddiicctt____
     |  
     |  ____wweeaakkrreeff____
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Boost.Python.instance:
     |  
     |  ____nneeww____ = <built-in method __new__ of Boost.Python.class object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T

